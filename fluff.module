<?php
/**
 * @file
 * Main module file for the Fluff module.  Projects are referred
 * to as puffs.
 */

/**
 * Implements hook_help
 */
function fluff_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fluff':
      return '<p>'. t('Fluff is a way of managing embeddable code-based content.') .'</p>';

  }
}

/**
 * Implements hook_menu
 */
function fluff_menu() {
  $items = array();

  $items['admin/build/fluff'] = array(
    'title' => 'Fluff',
    'description' => 'Manage puff projects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fluff_admin_settings'),
    'access arguments' => array('administer fluff'),
    'file' => 'includes/fluff.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/build/fluff/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/build/fluff/puffs'] = array(
    'title' => 'Puffs',
    'description' => 'Manage puff projects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fluff_admin_puffs'),
    'access arguments' => array('administer fluff'),
    'file' => 'includes/fluff.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/fluff/add'] = array(
    'title' => 'Add',
    'description' => 'Add a puff project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fluff_admin_add_puff'),
    'access arguments' => array('administer fluff'),
    'file' => 'includes/fluff.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Add a Puff given a Git URL.
 *
 * @param $uri
 *   The URI to clone from.
 * @param $options
 *   Array of options for build URL.
 * @param $site_specific
 *   Whether use the site specific path.
 *
 * @return
 *   TRUE if success, FALSE for general error, and string for specific message;
 */
function fluff_add_puff($uri, $options = array(), $site_specific = FALSE) {
  $root = fluff_document_root();
  $path = ($site_specific) ? conf_path() . '/puffs' : 'sites/all/puffs';
  $path = $root . '/' . $path;
  
  // Check if path exists.
  if (!file_exists($path)) {
    $dir_made = mkdir($path);
  }
  
  // Check URL
  $valid = fluff_valid_url($uri, TRUE);
  
  // Add any options, like pass to the URL
  $parts = fluff_parse_uri($uri);
  $uri = fluff_http_build_url(array_merge($parts, $options));
  
  // Figure out directory name
  $machine_name = isset($options['machine_name']) ? $options['machine_name'] : '';
  if (empty($machine_name)) {
    $path_parts = explode('/', $parts['path']);
    $machine_name = array_pop($path_parts);
    // Maybe a little presumptious
    $machine_name = str_replace('.git', '', $machine_name);
  }
  
  // Some sanity checks
  if (empty($machine_name)) {
    return t('Machine name was not found.');
  }
  
  // Check if already there
  if (file_exists($path . '/' . $machine_name)) {
    return t('Puff path already exists with the machine name: %name', array('%name' => $machine_name));
  }
  
  // Let's get the project
  if ($valid && $uri) {
    // Attemmpt to clone
    $cmd = 'cd ' . $path . '; git clone ' . escapeshellarg($uri) . ' ' . $machine_name . ' 2>&1';
    $success = fluff_exec($cmd, 'git', $output, $returned);
    
    // Handle any submodules
    if ($success === TRUE) {
      $cmd = 'cd ' . $path . '/' . $machine_name . '; git submodule init; git submodule update;';
      return fluff_exec($cmd, 'git', $output, $returned);
      
      // Look for 
    }
    
    return $success;
  }
  else {
    return t('Not a valid URI.');
  }
}

/**
 * Rebuild fluff indes.
 *
 * Goes through code in puffs and stores data as needed.
 */
function fluff_build_puff_index() {
  // Go through directories
  $puffs = drupal_system_listing('\.puff$', 'puffs', 'name', 0);
  
  // Save info and other data
  foreach ($puffs as $name => $file_info) {
    $puffs[$name]->info = drupal_parse_info_file($file_info->filename);
    
    // Create puff object
    $puff = new stdClass();
    $puff->machine_name = $name;
    $puff->title = $puffs[$name]->info['title'];
    $puff->config = $puffs[$name];
    
    // Save to DB
    $exists = db_result(db_query("SELECT machine_name FROM {fluff_puffs} WHERE machine_name = '%s'", $name));
    if ($exists) {
      drupal_write_record('fluff_puffs', $puff, 'machine_name');
    }
    else {
      drupal_write_record('fluff_puffs', $puff);
    }
  }
}

/**
 * Object loader for puffs.
 *
 * @param $name
 *   Puff name
 * @return object
 *   puff export
 */
function fluff_get_puff($name, $reset = TRUE) {
  ctools_include('export');
  if ($reset) {
    ctools_export_load_object_reset('fluff_puffs');
  }
  $puffs = ctools_export_load_object('fluff_puffs', 'all', array($name));
  return !empty($puffs[$name]) ? $puffs[$name] : FALSE;
}

/**
 * Get all puffs.
 *
 * @param $reset
 *   Boolean whether to reset cache or not
 * @return array
 *   layer exports
 */
function fluff_get_puffs($reset = TRUE) {
  ctools_include('export');
  if ($reset) {
    ctools_export_load_object_reset('fluff_puffs');
  }
  $puffs = ctools_export_load_object('fluff_puffs', 'all', array());
  return $puffs;
}

/**
 * A wrapper around the exec() command.
 *
 * @param $cmd
 *   String.  Actual command.
 * @param $type
 *   A string of a type of command.  Will be used for specific error
 *   handling.
 * @param $output
 *   Reference to all output.
 * @param $returned
 *    Reference to returned output.
 *
 * @return
 *   TRUE if success, FALSE for general error, and string for specific message;
 */
function fluff_exec($cmd = '', $type = '', &$output, &$returned) {
  $last_line = exec($cmd, $output, $returned);
  
  // Check for fatal errors
  $success = TRUE;
  foreach ($output as $out) {
    if (stripos($out, 'fatal') !== FALSE) {
      $success = t('Fatal error on command, %command.  Error: %error.', array(
        '%command' => $cmd,
        '%error' => $out,
      ));
    }
  }
  
  return $success;
}

/**
 * Get the document root for the current Drupal installation.
 * $_SERVER['DOCUMENT_ROOT'] is not reliable across all
 * systems, so we need a way to get the correct value.
 *
 * @return (string)
 */
function fluff_document_root() {
  static $path;

  if (empty($path)) {
    $absolute_dir = dirname(__FILE__);
    $relative_dir = drupal_get_path('module', 'fluff');
    return substr($absolute_dir, 0, -1 * (1 + strlen($relative_dir)));
  }
  else {
    return $path;
  }
}

/**
 * Valid URL
 *
 * Taken from Drupal API, but added git scheme.
 * @see http://api.drupal.org/api/drupal/core%21includes%21common.inc/function/valid_url
 */
function fluff_valid_url($url, $absolute = FALSE) {
  if ($absolute) {
    return (bool) preg_match("
      /^                                                      # Start at the beginning of the text
      (?:ftp|https?|feed|git):\/\/                            # Look for ftp, http, https or feed schemes
      (?:                                                     # Userinfo (optional) which is typically
        (?:(?:[\w\.\-\+!$&'\(\)*\+,;=]|%[0-9a-f]{2})+:)*      # a username or a username and password
        (?:[\w\.\-\+%!$&'\(\)*\+,;=]|%[0-9a-f]{2})+@          # combination
      )?
      (?:
        (?:[a-z0-9\-\.]|%[0-9a-f]{2})+                        # A domain name or a IPv4 address
        |(?:\[(?:[0-9a-f]{0,4}:)*(?:[0-9a-f]{0,4})\])         # or a well formed IPv6 address
      )
      (?::[0-9]+)?                                            # Server port number (optional)
      (?:[\/|\?]
        (?:[\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})   # The path and query (optional)
      *)?
    $/xi", $url);
  }
  else {
    return (bool) preg_match("/^(?:[\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})+$/i", $url);
  }
}

/**
 * Parse URL
 *
 * Utilizes PHP's parse_url but adds a workaround for
 * git based scheme.
 */
function fluff_parse_uri($uri = '') {
  $pos = strpos($uri, 'git');
  if ($pos === 0) {
    $uri = substr_replace($uri, 'http', $pos, 3);
    $parts = parse_url($uri);
    $parts['scheme'] = 'git';
    return $parts;
  }
  else {
    return parse_url($uri);
  }
}

/**
 * Build URL
 *
 * http_build_url is a PECL function so we wrap it with
 * a very basic funvtion.
 */
function fluff_http_build_url($parts = array()) {
  if (function_exists('http_build_url')) {
    return http_build_url($parts);
  }
  else {
    $keys = array('user','pass','port','path','query','fragment');
    $url = '';
    $url .= ((isset($parts['scheme'])) ? $parts['scheme'] . '://' : '')
			.((isset($parts['user'])) ? $parts['user'] . ((isset($parts['pass'])) ? ':' . $parts['pass'] : '') .'@' : '')
			.((isset($parts['host'])) ? $parts['host'] : '')
			.((isset($parts['port'])) ? ':' . $parts['port'] : '')
			.((isset($parts['path'])) ? $parts['path'] : '')
			.((isset($parts['query'])) ? '?' . $parts['query'] : '')
			.((isset($parts['fragment'])) ? '#' . $parts['fragment'] : '');
			
		return $url;
  }
}