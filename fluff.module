<?php
/**
 * @file
 * Main module file for the Fluff module.  Projects are referred
 * to as puffs.
 */

/**
 * Add a Puff given a Git URL.
 *
 * @param $uri
 *   The URI to clone from.
 * @param $site_specific
 *   Whether use the site specific path.
 *
 * @return
 *   The path to the specified Puff.
 */
function fluff_add_puff($uri, $site_specific = FALSE) {
  $root = fluff_document_root();
  $path = ($site_specific) ? conf_path() . '/puffs' : 'sites/all/puffs';
  $path = $root . '/' . $path;
  
  // Check if path exists.
  if (!file_exists($path)) {
    $dir_made = mkdir($path);
  }
  
  $uri = escapeshellarg($uri);
  $cmd = 'cd ' . $path . '; git clone ' . $uri;
  $last_line = exec($cmd, $output, $returned);
}

/**
 * Gets the path of a Puff (project).
 *
 * @param $name
 *   The machine name of the Puff to return the path for.
 * @param $base_path
 *   Whether to prefix the resulting path with base_path().
 *
 * @return
 *   The path to the specified Puff.
 */
function fluff_get_puff_path($name, $base_path = FALSE) {
  static $puffs;

  if (!isset($puffs)) {
    $puffs = fluff_get_puffs();
  }

  $path = ($base_path ? base_path() : '');
  if (!isset($puffs[$name])) {
    // Most often, external libraries can be shared across multiple sites, so
    // we return sites/all/libraries as the default path.
    $path .= 'sites/all/libraries/' . $name;
  }
  else {
    $path .= $puffs[$name];
  }

  return $path;
}

/**
 * Returns an array of Puff directories.
 *
 * Returns an array of directories from the all-sites directory
 * (i.e. sites/all/puffs/), the profiles directory, and site-specific
 * directory (i.e. sites/somesite/puffs/).
 *
 * @return
 *   A list of directories.
 */
function fluff_get_puffs() {
  global $profile;

  // When this function is called during Drupal's initial installation process,
  // the name of the profile that is about to be installed is stored in the
  // global $profile variable. At all other times, the regular system variable
  // contains the name of the current profile, and we can call variable_get()
  // to determine the profile.
  if (!isset($profile)) {
    $profile = variable_get('install_profile', 'default');
  }

  $directory = 'puffs';
  $searchdir = array();
  $config = conf_path();

  // The 'profiles' directory contains pristine collections of modules and
  // themes as organized by a distribution.  It is pristine in the same way
  // that /modules is pristine for core; users should avoid changing anything
  // there in favor of sites/all or sites/<domain> directories.
  if (file_exists("profiles/$profile/$directory")) {
    $searchdir[] = "profiles/$profile/$directory";
  }

  // Always search sites/all/*.
  $searchdir[] = 'sites/all/' . $directory;

  // Also search sites/<domain>/*.
  if (file_exists("$config/$directory")) {
    $searchdir[] = "$config/$directory";
  }

  // Retrieve list of directories.
  // @todo Core: Allow to scan for directories.
  $directories = array();
  $nomask = array('CVS');
  foreach ($searchdir as $dir) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while (FALSE !== ($file = readdir($handle))) {
        if (!in_array($file, $nomask) && $file[0] != '.') {
          if (is_dir("$dir/$file")) {
            $directories[$file] = "$dir/$file";
          }
        }
      }
      closedir($handle);
    }
  }

  return $directories;
}

/**
 * Get the document root for the current Drupal installation.
 * $_SERVER['DOCUMENT_ROOT'] is not reliable across all
 * systems, so we need a way to get the correct value.
 *
 * @return (string)
 */
function fluff_document_root() {
  static $path;

  if (empty($path)) {
    $absolute_dir = dirname(__FILE__);
    $relative_dir = drupal_get_path('module', 'fluff');
    return substr($absolute_dir, 0, -1 * (1 + strlen($relative_dir)));
  }
  else {
    return $path;
  }
}