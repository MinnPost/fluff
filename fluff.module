<?php
/**
 * @file
 * Main module file for the Fluff module.  Projects are referred
 * to as puffs.
 */

/**
 * Add a Puff given a Git URL.
 *
 * @param $uri
 *   The URI to clone from.
 * @param $site_specific
 *   Whether use the site specific path.
 *
 * @return
 *   TRUE if success, FALSE for general error, and string for specific message;
 */
function fluff_add_puff($uri, $options = array(), $site_specific = FALSE) {
  $root = fluff_document_root();
  $path = ($site_specific) ? conf_path() . '/puffs' : 'sites/all/puffs';
  $path = $root . '/' . $path;
  
  // Check if path exists.
  if (!file_exists($path)) {
    $dir_made = mkdir($path);
  }
  
  // Check URL
  $valid = fluff_valid_url($uri, TRUE);
  
  // Add any options, like pass to the URL
  $parts = fluff_parse_uri($uri);
  $uri = fluff_http_build_url(array_merge($parts, $options));
  
  if ($valid && $uri) {
    // Attemmpt to clone
    $cmd = 'cd ' . $path . '; git clone ' . escapeshellarg($uri) . ' 2>&1';
    $last_line = exec($cmd, $output, $returned);
    
    // Check for errors
    $success = TRUE;
    foreach ($output as $out) {
      if (stripos($out, 'fatal') !== FALSE) {
        $success = $out;
      }
    }
    
    dpm($success);
    return $success;
  }
  
  return FALSE;
}

/**
 * Gets the path of a Puff (project).
 *
 * @param $name
 *   The machine name of the Puff to return the path for.
 * @param $base_path
 *   Whether to prefix the resulting path with base_path().
 *
 * @return
 *   The path to the specified Puff.
 */
function fluff_get_puff_path($name, $base_path = FALSE) {
  static $puffs;

  if (!isset($puffs)) {
    $puffs = fluff_get_puffs();
  }

  $path = ($base_path ? base_path() : '');
  if (!isset($puffs[$name])) {
    // Most often, external libraries can be shared across multiple sites, so
    // we return sites/all/libraries as the default path.
    $path .= 'sites/all/libraries/' . $name;
  }
  else {
    $path .= $puffs[$name];
  }

  return $path;
}

/**
 * Returns an array of Puff directories.
 *
 * Returns an array of directories from the all-sites directory
 * (i.e. sites/all/puffs/), the profiles directory, and site-specific
 * directory (i.e. sites/somesite/puffs/).
 *
 * @return
 *   A list of directories.
 */
function fluff_get_puffs() {
  global $profile;

  // When this function is called during Drupal's initial installation process,
  // the name of the profile that is about to be installed is stored in the
  // global $profile variable. At all other times, the regular system variable
  // contains the name of the current profile, and we can call variable_get()
  // to determine the profile.
  if (!isset($profile)) {
    $profile = variable_get('install_profile', 'default');
  }

  $directory = 'puffs';
  $searchdir = array();
  $config = conf_path();

  // The 'profiles' directory contains pristine collections of modules and
  // themes as organized by a distribution.  It is pristine in the same way
  // that /modules is pristine for core; users should avoid changing anything
  // there in favor of sites/all or sites/<domain> directories.
  if (file_exists("profiles/$profile/$directory")) {
    $searchdir[] = "profiles/$profile/$directory";
  }

  // Always search sites/all/*.
  $searchdir[] = 'sites/all/' . $directory;

  // Also search sites/<domain>/*.
  if (file_exists("$config/$directory")) {
    $searchdir[] = "$config/$directory";
  }

  // Retrieve list of directories.
  // @todo Core: Allow to scan for directories.
  $directories = array();
  $nomask = array('CVS');
  foreach ($searchdir as $dir) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while (FALSE !== ($file = readdir($handle))) {
        if (!in_array($file, $nomask) && $file[0] != '.') {
          if (is_dir("$dir/$file")) {
            $directories[$file] = "$dir/$file";
          }
        }
      }
      closedir($handle);
    }
  }

  return $directories;
}

/**
 * Get the document root for the current Drupal installation.
 * $_SERVER['DOCUMENT_ROOT'] is not reliable across all
 * systems, so we need a way to get the correct value.
 *
 * @return (string)
 */
function fluff_document_root() {
  static $path;

  if (empty($path)) {
    $absolute_dir = dirname(__FILE__);
    $relative_dir = drupal_get_path('module', 'fluff');
    return substr($absolute_dir, 0, -1 * (1 + strlen($relative_dir)));
  }
  else {
    return $path;
  }
}

/**
 * Valid URL
 *
 * Taken from Drupal API, but added git scheme.
 * @see http://api.drupal.org/api/drupal/core%21includes%21common.inc/function/valid_url
 */
function fluff_valid_url($url, $absolute = FALSE) {
  if ($absolute) {
    return (bool) preg_match("
      /^                                                      # Start at the beginning of the text
      (?:ftp|https?|feed|git):\/\/                            # Look for ftp, http, https or feed schemes
      (?:                                                     # Userinfo (optional) which is typically
        (?:(?:[\w\.\-\+!$&'\(\)*\+,;=]|%[0-9a-f]{2})+:)*      # a username or a username and password
        (?:[\w\.\-\+%!$&'\(\)*\+,;=]|%[0-9a-f]{2})+@          # combination
      )?
      (?:
        (?:[a-z0-9\-\.]|%[0-9a-f]{2})+                        # A domain name or a IPv4 address
        |(?:\[(?:[0-9a-f]{0,4}:)*(?:[0-9a-f]{0,4})\])         # or a well formed IPv6 address
      )
      (?::[0-9]+)?                                            # Server port number (optional)
      (?:[\/|\?]
        (?:[\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})   # The path and query (optional)
      *)?
    $/xi", $url);
  }
  else {
    return (bool) preg_match("/^(?:[\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})+$/i", $url);
  }
}

/**
 * Parse URL
 *
 * Utilizes PHP's parse_url but adds a workaround for
 * git based scheme.
 */
function fluff_parse_uri($uri = '') {
  $pos = strpos($uri, 'git');
  if ($pos === 0) {
    $uri = substr_replace($uri, 'http', $pos, 3);
    $parts = parse_url($uri);
    $parts['scheme'] = 'git';
    return $parts;
  }
  else {
    return parse_url($uri);
  }
}

/**
 * Build URL
 *
 * http_build_url is a PECL function so we wrap it with
 * a very basic funvtion.
 */
function fluff_http_build_url($parts = array()) {
  if (function_exists('http_build_url')) {
    return http_build_url($parts);
  }
  else {
    $keys = array('user','pass','port','path','query','fragment');
    $url = '';
    $url .= ((isset($parts['scheme'])) ? $parts['scheme'] . '://' : '')
			.((isset($parts['user'])) ? $parts['user'] . ((isset($parts['pass'])) ? ':' . $parts['pass'] : '') .'@' : '')
			.((isset($parts['host'])) ? $parts['host'] : '')
			.((isset($parts['port'])) ? ':' . $parts['port'] : '')
			.((isset($parts['path'])) ? $parts['path'] : '')
			.((isset($parts['query'])) ? '?' . $parts['query'] : '')
			.((isset($parts['fragment'])) ? '#' . $parts['fragment'] : '');
			
		return $url;
  }
}